
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 07 20:15:43 CST 2024
//----------------------------------------------------

package demo_cup;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 07 20:15:43 CST 2024
  */
public class Parsercpp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parsercpp() {super();}

  /** Constructor which sets the default scanner. */
  public Parsercpp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parsercpp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\004" +
    "\005\000\002\004\006\000\002\004\006\000\002\015\003" +
    "\000\002\015\005\000\002\006\003\000\002\014\006\000" +
    "\002\014\007\000\002\005\005\000\002\007\010\000\002" +
    "\017\003\000\002\017\004\000\002\016\011\000\002\025" +
    "\007\000\002\026\011\000\002\026\007\000\002\027\020" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\033\003\000\002\033\005\000\002\032\004\000\002\032" +
    "\004\000\002\023\003\000\002\023\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\030" +
    "\003\000\002\030\004\000\002\031\003\000\002\031\003" +
    "\000\002\022\007\000\002\035\010\000\002\036\010\000" +
    "\002\037\010\000\002\040\010\000\002\034\003\000\002" +
    "\034\005\000\002\010\007\000\002\010\005\000\002\010" +
    "\007\000\002\010\005\000\002\010\007\000\002\010\005" +
    "\000\002\010\007\000\002\010\005\000\002\010\007\000" +
    "\002\010\007\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\020\010" +
    "\000\002\020\010\000\002\020\010\000\002\020\010\000" +
    "\002\021\007\000\002\021\011\000\002\011\002\000\002" +
    "\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\054\005\001\002\000\004\002\000\001" +
    "\002\000\004\105\323\001\002\000\004\061\013\001\002" +
    "\000\004\002\011\001\002\000\004\061\ufffa\001\002\000" +
    "\004\002\001\001\002\000\020\022\021\023\033\024\024" +
    "\032\022\033\032\042\034\076\035\001\002\000\004\122" +
    "\014\001\002\000\010\005\017\101\ufffc\106\ufffc\001\002" +
    "\000\004\101\016\001\002\000\020\022\ufff7\023\ufff7\024" +
    "\ufff7\032\ufff7\033\ufff7\042\ufff7\076\ufff7\001\002\000\004" +
    "\122\014\001\002\000\006\101\ufffb\106\ufffb\001\002\000" +
    "\004\122\322\001\002\000\004\122\272\001\002\000\004" +
    "\002\uffff\001\002\000\004\122\264\001\002\000\010\022" +
    "\uffd6\042\uffd6\076\uffd6\001\002\000\004\022\067\001\002" +
    "\000\004\022\067\001\002\000\010\022\uffd8\042\034\076" +
    "\035\001\002\000\010\022\uffd5\042\uffd5\076\uffd5\001\002" +
    "\000\004\122\253\001\002\000\004\122\245\001\002\000" +
    "\004\122\062\001\002\000\012\022\041\023\040\024\036" +
    "\033\037\001\002\000\004\077\056\001\002\000\004\077" +
    "\052\001\002\000\004\077\046\001\002\000\004\077\042" +
    "\001\002\000\004\100\043\001\002\000\004\123\044\001" +
    "\002\000\004\101\045\001\002\000\010\022\uffbb\042\uffbb" +
    "\076\uffbb\001\002\000\004\100\047\001\002\000\004\115" +
    "\050\001\002\000\004\101\051\001\002\000\010\022\uffba" +
    "\042\uffba\076\uffba\001\002\000\004\100\053\001\002\000" +
    "\004\121\054\001\002\000\004\101\055\001\002\000\010" +
    "\022\uffb8\042\uffb8\076\uffb8\001\002\000\004\100\057\001" +
    "\002\000\004\020\060\001\002\000\004\101\061\001\002" +
    "\000\010\022\uffb9\042\uffb9\076\uffb9\001\002\000\004\116" +
    "\063\001\002\000\004\053\064\001\002\000\004\022\067" +
    "\001\002\000\006\022\067\117\ufff5\001\002\000\004\117" +
    "\243\001\002\000\004\122\070\001\002\000\004\010\071" +
    "\001\002\000\004\011\072\001\002\000\006\101\073\116" +
    "\074\001\002\000\010\002\uffb7\022\uffb7\117\uffb7\001\002" +
    "\000\026\021\110\022\100\023\033\024\024\032\022\033" +
    "\032\041\101\072\103\074\115\075\114\001\002\000\004" +
    "\117\242\001\002\000\030\021\110\022\100\023\033\024" +
    "\024\032\022\033\032\041\101\072\103\074\115\075\114" +
    "\117\uffe4\001\002\000\030\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\032\uffdb\033\uffdb\041\uffdb\072\uffdb\074\uffdb\075\uffdb" +
    "\117\uffdb\001\002\000\004\122\213\001\002\000\004\010" +
    "\205\001\002\000\030\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\032\uffdf\033\uffdf\041\uffdf\072\uffdf\074\uffdf\075\uffdf\117" +
    "\uffdf\001\002\000\004\010\174\001\002\000\030\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\032\uffda\033\uffda\041\uffda\072" +
    "\uffda\074\uffda\075\uffda\117\uffda\001\002\000\032\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\032\uffe2\033\uffe2\041\uffe2\072" +
    "\uffe2\073\170\074\uffe2\075\uffe2\117\uffe2\001\002\000\030" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\032\uffe0\033\uffe0\041" +
    "\uffe0\072\uffe0\074\uffe0\075\uffe0\117\uffe0\001\002\000\030" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\032\uffde\033\uffde\041" +
    "\uffde\072\uffde\074\uffde\075\uffde\117\uffde\001\002\000\004" +
    "\116\164\001\002\000\030\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\032\uffdc\033\uffdc\041\uffdc\072\uffdc\074\uffdc\075\uffdc" +
    "\117\uffdc\001\002\000\030\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\032\uffd9\033\uffd9\041\uffd9\072\uffd9\074\uffd9\075\uffd9" +
    "\117\uffd9\001\002\000\030\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\032\uffe1\033\uffe1\041\uffe1\072\uffe1\074\uffe1\075\uffe1" +
    "\117\uffe1\001\002\000\004\105\160\001\002\000\004\010" +
    "\117\001\002\000\030\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\032\uffdd\033\uffdd\041\uffdd\072\uffdd\074\uffdd\075\uffdd\117" +
    "\uffdd\001\002\000\004\122\120\001\002\000\004\100\121" +
    "\001\002\000\010\115\124\122\122\123\125\001\002\000" +
    "\004\101\uffb2\001\002\000\004\101\126\001\002\000\004" +
    "\101\uffb3\001\002\000\004\101\uffb4\001\002\000\004\122" +
    "\127\001\002\000\016\014\147\105\150\106\144\107\145" +
    "\110\151\111\146\001\002\000\004\101\131\001\002\000" +
    "\004\122\132\001\002\000\006\102\134\112\133\001\002" +
    "\000\004\112\143\001\002\000\004\102\142\001\002\000" +
    "\004\011\136\001\002\000\004\116\137\001\002\000\026" +
    "\021\110\022\100\023\033\024\024\032\022\033\032\041" +
    "\101\072\103\074\115\075\114\001\002\000\004\117\141" +
    "\001\002\000\030\021\uffef\022\uffef\023\uffef\024\uffef\032" +
    "\uffef\033\uffef\041\uffef\072\uffef\074\uffef\075\uffef\117\uffef" +
    "\001\002\000\004\011\uffe6\001\002\000\004\011\uffe5\001" +
    "\002\000\004\123\157\001\002\000\004\123\156\001\002" +
    "\000\004\123\155\001\002\000\004\123\154\001\002\000" +
    "\004\123\153\001\002\000\004\123\152\001\002\000\010" +
    "\011\uffec\015\uffec\101\uffec\001\002\000\010\011\uffed\015" +
    "\uffed\101\uffed\001\002\000\010\011\uffe9\015\uffe9\101\uffe9" +
    "\001\002\000\010\011\uffea\015\uffea\101\uffea\001\002\000" +
    "\010\011\uffeb\015\uffeb\101\uffeb\001\002\000\010\011\uffee" +
    "\015\uffee\101\uffee\001\002\000\004\105\161\001\002\000" +
    "\004\020\162\001\002\000\004\101\163\001\002\000\030" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\032\uffd4\033\uffd4\041" +
    "\uffd4\072\uffd4\074\uffd4\075\uffd4\117\uffd4\001\002\000\026" +
    "\021\110\022\100\023\033\024\024\032\022\033\032\041" +
    "\101\072\103\074\115\075\114\001\002\000\004\117\166" +
    "\001\002\000\006\021\110\041\101\001\002\000\030\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\032\ufff0\033\ufff0\041\ufff0" +
    "\072\ufff0\074\ufff0\075\ufff0\117\ufff0\001\002\000\004\116" +
    "\171\001\002\000\026\021\110\022\100\023\033\024\024" +
    "\032\022\033\032\041\101\072\103\074\115\075\114\001" +
    "\002\000\004\117\173\001\002\000\030\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\032\ufff2\033\ufff2\041\ufff2\072\ufff2\074" +
    "\ufff2\075\ufff2\117\ufff2\001\002\000\004\122\127\001\002" +
    "\000\006\011\uffe8\015\203\001\002\000\004\011\177\001" +
    "\002\000\004\116\200\001\002\000\026\021\110\022\100" +
    "\023\033\024\024\032\022\033\032\041\101\072\103\074" +
    "\115\075\114\001\002\000\004\117\202\001\002\000\032" +
    "\021\ufff3\022\ufff3\023\ufff3\024\ufff3\032\ufff3\033\ufff3\041" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\117\ufff3\001\002" +
    "\000\004\122\127\001\002\000\004\011\uffe7\001\002\000" +
    "\004\122\127\001\002\000\004\011\207\001\002\000\004" +
    "\116\210\001\002\000\026\021\110\022\100\023\033\024" +
    "\024\032\022\033\032\041\101\072\103\074\115\075\114" +
    "\001\002\000\004\117\212\001\002\000\030\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\032\ufff1\033\ufff1\041\ufff1\072\ufff1" +
    "\074\ufff1\075\ufff1\117\ufff1\001\002\000\012\006\216\100" +
    "\217\101\uffcf\123\220\001\002\000\004\101\215\001\002" +
    "\000\030\021\uffcc\022\uffcc\023\uffcc\024\uffcc\032\uffcc\033" +
    "\uffcc\041\uffcc\072\uffcc\074\uffcc\075\uffcc\117\uffcc\001\002" +
    "\000\004\122\237\001\002\000\004\123\235\001\002\000" +
    "\012\102\222\112\221\113\223\114\224\001\002\000\004" +
    "\123\233\001\002\000\004\123\231\001\002\000\004\123" +
    "\227\001\002\000\004\123\225\001\002\000\004\100\226" +
    "\001\002\000\030\021\uffd0\022\uffd0\023\uffd0\024\uffd0\032" +
    "\uffd0\033\uffd0\041\uffd0\072\uffd0\074\uffd0\075\uffd0\117\uffd0" +
    "\001\002\000\004\100\230\001\002\000\030\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\032\uffd1\033\uffd1\041\uffd1\072\uffd1" +
    "\074\uffd1\075\uffd1\117\uffd1\001\002\000\004\100\232\001" +
    "\002\000\030\021\uffd3\022\uffd3\023\uffd3\024\uffd3\032\uffd3" +
    "\033\uffd3\041\uffd3\072\uffd3\074\uffd3\075\uffd3\117\uffd3\001" +
    "\002\000\004\100\234\001\002\000\030\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\032\uffd2\033\uffd2\041\uffd2\072\uffd2\074" +
    "\uffd2\075\uffd2\117\uffd2\001\002\000\004\101\236\001\002" +
    "\000\030\021\uffcd\022\uffcd\023\uffcd\024\uffcd\032\uffcd\033" +
    "\uffcd\041\uffcd\072\uffcd\074\uffcd\075\uffcd\117\uffcd\001\002" +
    "\000\006\006\216\101\uffcf\001\002\000\004\101\uffce\001" +
    "\002\000\004\117\uffe3\001\002\000\010\002\uffb6\022\uffb6" +
    "\117\uffb6\001\002\000\010\022\ufff6\042\ufff6\076\ufff6\001" +
    "\002\000\004\117\ufff4\001\002\000\010\006\216\100\250" +
    "\101\uffcf\001\002\000\004\101\247\001\002\000\030\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\032\uffca\033\uffca\041\uffca" +
    "\072\uffca\074\uffca\075\uffca\117\uffca\001\002\000\004\115" +
    "\251\001\002\000\004\101\252\001\002\000\030\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\032\uffcb\033\uffcb\041\uffcb\072" +
    "\uffcb\074\uffcb\075\uffcb\117\uffcb\001\002\000\010\006\216" +
    "\100\256\101\uffcf\001\002\000\004\101\255\001\002\000" +
    "\030\021\uffc6\022\uffc6\023\uffc6\024\uffc6\032\uffc6\033\uffc6" +
    "\041\uffc6\072\uffc6\074\uffc6\075\uffc6\117\uffc6\001\002\000" +
    "\004\121\257\001\002\000\004\101\260\001\002\000\030" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\032\uffc7\033\uffc7\041" +
    "\uffc7\072\uffc7\074\uffc7\075\uffc7\117\uffc7\001\002\000\004" +
    "\022\uffd7\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\ufffe\001\002\000\010\006\216\100\267\101\uffcf\001\002" +
    "\000\004\101\266\001\002\000\030\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\032\uffc8\033\uffc8\041\uffc8\072\uffc8\074\uffc8" +
    "\075\uffc8\117\uffc8\001\002\000\004\020\270\001\002\000" +
    "\004\101\271\001\002\000\030\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\032\uffc9\033\uffc9\041\uffc9\072\uffc9\074\uffc9\075" +
    "\uffc9\117\uffc9\001\002\000\004\100\273\001\002\000\012" +
    "\020\277\030\275\031\276\123\300\001\002\000\004\101" +
    "\321\001\002\000\004\015\314\001\002\000\004\015\307" +
    "\001\002\000\004\101\306\001\002\000\004\015\301\001" +
    "\002\000\006\030\302\031\303\001\002\000\004\101\305" +
    "\001\002\000\004\101\304\001\002\000\030\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\032\uffc0\033\uffc0\041\uffc0\072\uffc0" +
    "\074\uffc0\075\uffc0\117\uffc0\001\002\000\030\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\032\uffc1\033\uffc1\041\uffc1\072\uffc1" +
    "\074\uffc1\075\uffc1\117\uffc1\001\002\000\030\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\032\uffc5\033\uffc5\041\uffc5\072\uffc5" +
    "\074\uffc5\075\uffc5\117\uffc5\001\002\000\010\030\310\031" +
    "\311\123\312\001\002\000\004\101\uffbd\001\002\000\004" +
    "\101\uffbc\001\002\000\004\101\313\001\002\000\030\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\032\uffc2\033\uffc2\041\uffc2" +
    "\072\uffc2\074\uffc2\075\uffc2\117\uffc2\001\002\000\010\030" +
    "\315\031\316\123\317\001\002\000\004\101\uffbf\001\002" +
    "\000\004\101\uffbe\001\002\000\004\101\320\001\002\000" +
    "\030\021\uffc3\022\uffc3\023\uffc3\024\uffc3\032\uffc3\033\uffc3" +
    "\041\uffc3\072\uffc3\074\uffc3\075\uffc3\117\uffc3\001\002\000" +
    "\030\021\uffc4\022\uffc4\023\uffc4\024\uffc4\032\uffc4\033\uffc4" +
    "\041\uffc4\072\uffc4\074\uffc4\075\uffc4\117\uffc4\001\002\000" +
    "\012\006\216\010\071\100\217\101\uffcf\001\002\000\004" +
    "\122\014\001\002\000\004\106\325\001\002\000\006\054" +
    "\005\061\ufff9\001\002\000\004\061\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\012\002\006\004\003\006\005\014\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\030\010\025\020\024\021\022\030\026" +
    "\031\027\001\001\000\004\015\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\017" +
    "\001\001\000\002\001\001\000\004\034\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\264\001\001" +
    "\000\002\001\001\000\004\021\262\001\001\000\004\021" +
    "\261\001\001\000\012\007\030\020\024\030\260\031\027" +
    "\001\001\000\002\001\001\000\004\034\253\001\001\000" +
    "\004\034\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\065\021\064\001\001\000\006\017\243\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\075\010\115\016\104\022\112\023\074\025\105\026" +
    "\101\027\106\035\110\036\076\037\103\040\111\001\001" +
    "\000\002\001\001\000\032\003\075\010\115\016\104\022" +
    "\112\023\240\025\105\026\101\027\106\035\110\036\076" +
    "\037\103\040\111\001\001\000\002\001\001\000\004\034" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\075\010\115\016\104\022\112\023\137\025\105" +
    "\026\101\027\106\035\110\036\076\037\103\040\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\075\010\115\016\104\022\112" +
    "\023\164\025\105\026\101\027\106\035\110\036\076\037" +
    "\103\040\111\001\001\000\002\001\001\000\004\026\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\075\010\115\016\104\022\112\023\171\025\105\026\101" +
    "\027\106\035\110\036\076\037\103\040\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\174\033\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\075\010\115\016\104\022\112\023\200" +
    "\025\105\026\101\027\106\035\110\036\076\037\103\040" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\174\033\203\001\001\000\002\001\001\000\004\024" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\075\010\115\016\104\022\112\023\210\025\105\026" +
    "\101\027\106\035\110\036\076\037\103\040\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\323\001\001\000\002\001\001\000\004" +
    "\014\325\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parsercpp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parsercpp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parsercpp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla= new TablaSimbolos();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s) 
    {
        report_error("Error de sintaxis en linea:" + (s.left) + 
                     " ,columna: " + (s.right) +
                     " ,simbolo: " + s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws Exception 
    {
        report_fatal_error("ERROR IRRECUPERABLE", s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parsercpp$actions {
  private final Parsercpp parser;

  /** Constructor */
  CUP$Parsercpp$actions(Parsercpp parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parsercpp$do_action(
    int                        CUP$Parsercpp$act_num,
    java_cup.runtime.lr_parser CUP$Parsercpp$parser,
    java.util.Stack            CUP$Parsercpp$stack,
    int                        CUP$Parsercpp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parsercpp$result;

      /* select the action based on the action number */
      switch (CUP$Parsercpp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("valor",8, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("valor",8, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("valor",8, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_dato ::= 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("tipo_dato",7, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dec_funcion ::= INT ID PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APER cuerpo_instrucciones LLAVE_CERR 
            {
              Object RESULT =null;
		 
        System.out.println("\nfuncion main \n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_funcion",15, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dec_funcion ::= INT ID PARENTESIS_APERTURA PARENTESIS_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\nDeclaracion de funcion\n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_funcion",15, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dec_constantes ::= CONST CHAR CONSTANTE ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		int constaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int constaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		Object consta = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object caracter = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de constante caracter\n"); 
        parser.simbolo=new Simbolo(consta.toString(), "char", ""+caracter, "global", true);
        if(parser.tabla.agregar(consta.toString(), parser.simbolo)){
                        System.out.println("Consntante agregada "+consta.toString());
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Constante NO agregada "+consta.toString());
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_constantes",14, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dec_constantes ::= CONST STRING CONSTANTE ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int constaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int constaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		Object consta = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de constante cadena\n"); 
        parser.simbolo=new Simbolo(consta.toString(), "string", ""+cadena, "global", true);
        if(parser.tabla.agregar(consta.toString(), parser.simbolo)){
                        System.out.println("Consntante agregada "+consta.toString());
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Constante NO agregada "+consta.toString());
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_constantes",14, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dec_constantes ::= CONST FLOAT CONSTANTE ASIGNACION FLOTANTE PUNTO_COMA 
            {
              Object RESULT =null;
		int constaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int constaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		Object consta = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de constante flotante\n"); 
        parser.simbolo=new Simbolo(consta.toString(), "float", ""+flotante, "global", true);
        if(parser.tabla.agregar(consta.toString(), parser.simbolo)){
                        System.out.println("Consntante agregada "+consta.toString());
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Constante NO agregada "+consta.toString());
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_constantes",14, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_constantes ::= CONST INT CONSTANTE ASIGNACION ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int constaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int constaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		Object consta = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de constante entero\n"); 
        parser.simbolo=new Simbolo(consta.toString(), "int", ""+entero, "global", true);
        if(parser.tabla.agregar(consta.toString(), parser.simbolo)){
                        System.out.println("Consntante agregada "+consta.toString());
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Constante NO agregada "+consta.toString());
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_constantes",14, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolcheck ::= FALSE AND FALSE 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("boolcheck",31, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolcheck ::= FALSE AND TRUE 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("boolcheck",31, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolcheck ::= TRUE AND FALSE 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("boolcheck",31, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolcheck ::= TRUE AND TRUE 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("boolcheck",31, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec_variables ::= BOOL ID ASIGNACION ENTERO AND FALSE PUNTO_COMA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		 
        System.out.println("\n ERROR uno de los operandos no es booleano -> "+entero+" no es booleano \n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_variables ::= BOOL ID ASIGNACION ENTERO AND TRUE PUNTO_COMA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		 
        System.out.println("\n ERROR uno de los operandos no es booleano -> "+entero+" no es booleano \n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec_variables ::= BOOL ID ASIGNACION FALSE AND ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\n ERROR uno de los operandos no es booleano -> "+entero+" no es booleano \n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_variables ::= BOOL ID ASIGNACION TRUE AND ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\n ERROR uno de los operandos no es booleano -> "+entero+" no es booleano \n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_variables ::= BOOL ID ASIGNACION boolcheck PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\n Correcto ambos operandos son booleanos\n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_variables ::= BOOL ID ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de variable booleana\n");
        parser.simbolo=new Simbolo(id, "bool", ""+cadena, "metodo", false);
        if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("booleano agregado "+id);
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR boolana NO agregada "+id);
                    }
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_variables ::= CHAR lista_var PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\nDeclaracion de multiples variables caracter en una linea\n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_variables ::= CHAR ID ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object caracter = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de variable caracter\n"); 
        parser.simbolo=new Simbolo(id, "char", ""+caracter, "metodo", false);
        if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Variable agregada "+id);
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Variable NO agregada "+id);
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_variables ::= STRING lista_var PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\nDeclaracion de multiples variables cadena en una linea\n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_variables ::= STRING ID ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de variable cadena\n"); 
        parser.simbolo=new Simbolo(id, "string", ""+cadena, "metodo", false);
        if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Variable agregada "+id);
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Variable NO agregada "+id);
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_variables ::= FLOAT lista_var PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\nDeclaracion de multiples variables flotante en una linea\n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_variables ::= FLOAT ID ASIGNACION FLOTANTE PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de variable flotante\n");
        parser.simbolo=new Simbolo(id, "float", ""+flotante, "metodo", false);
        if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Variable agregada "+id);
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("ERROR Variable NO agregada "+id);
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_variables ::= INT lista_var PUNTO_COMA 
            {
              Object RESULT =null;
		 
        System.out.println("\nDeclaracion de multiples variables entero en una linea\n");
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_variables ::= INT ID ASIGNACION ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		 
        System.out.println("\nDeclaracion de variable entero\n"); 
        parser.simbolo=new Simbolo(id, "int", ""+entero, "metodo", false);
        if(parser.tabla.agregar(id, parser.simbolo)){
                        System.out.println("Variable agregada "+id);
                        System.out.println(parser.tabla.mostrar());
                    }else{
                        System.out.println("Error Variable NO agregada porque ya fue declarada -> "+id);
                    }
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_var ::= ID COMA lista_var 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_var",26, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_var ::= ID 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_var",26, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec_divi ::= INT ID ENTERO DIVI ENTERO ASIGNACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		
        int x = Integer.parseInt(s1);
        int y = Integer.parseInt(s2);
         float resultado = (float) x / y;
         if (y==0){System.out.println("\n ERROR no se puede dividir entre 0");}
         else{System.out.println("\n Correcto es resultado es : -> "+resultado);
         System.out.println("");}
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_divi",30, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_multi ::= INT ID ENTERO MULTI ENTERO ASIGNACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		
        int x = Integer.parseInt(s1);
        int y = Integer.parseInt(s2);
         RESULT = x*y;
         System.out.println("\n Correcto es resultado es : -> "+RESULT);
         System.out.println("");
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_multi",29, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec_resta ::= INT ID ENTERO RESTA ENTERO ASIGNACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		
        int x = Integer.parseInt(s1);
        int y = Integer.parseInt(s2);
         RESULT = x-y;
         System.out.println("\n Correcto es resultado es : -> "+RESULT);
         System.out.println("");
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_resta",28, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_suma ::= INT ID ENTERO OPERADOR_ARITMETICO ENTERO ASIGNACION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		
        int x = Integer.parseInt(s1);
        int y = Integer.parseInt(s2);
         RESULT = x+y;
         System.out.println("\n Correcto es resultado es : -> "+RESULT);
         System.out.println("");
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_suma",27, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // impresiones ::= COUT OPERADOR_MEQ OPERADOR_MEQ CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		
         System.out.println("\nImpresion en consola\n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // antes ::= dec_clases 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("antes",23, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // antes ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("antes",23, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paraconst ::= antes paraconst 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("paraconst",22, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paraconst ::= antes 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("paraconst",22, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instrucciones ::= dec_divi 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrucciones ::= dec_multi 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucciones ::= dec_resta 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciones ::= dec_suma 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= dec_variables 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= dec_for 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= dec_while 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= dec_else 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= dec_if 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_instrucciones ::= instrucciones cuerpo_instrucciones 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("cuerpo_instrucciones",17, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_instrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("cuerpo_instrucciones",17, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expfor ::= RESTA RESTA 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expfor",24, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expfor ::= OPERADOR_ARITMETICO OPERADOR_ARITMETICO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expfor",24, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_compuesta ::= expresion_booleana AND expresion_compuesta 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_compuesta",25, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_compuesta ::= expresion_booleana 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_compuesta",25, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_booleana ::= ID OPERADOR_RELACIONAL ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_booleana ::= ID OPERADOR_D ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_booleana ::= ID OPERADOR_MEIQ ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_booleana ::= ID OPERADOR_MAIQ ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_booleana ::= ID OPERADOR_MEQ ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_booleana ::= ID OPERADOR_MAQ ENTERO 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_for ::= FOR PARENTESIS_APERTURA ID ASIGNACION valor PUNTO_COMA expresion_booleana PUNTO_COMA ID expfor PARENTESIS_CIERRE LLAVE_APER cuerpo_instrucciones LLAVE_CERR 
            {
              Object RESULT =null;
		
         System.out.println("\nCiclo for \n"); 
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_for",21, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-13)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_while ::= DO LLAVE_APER cuerpo_instrucciones LLAVE_CERR dec_while 
            {
              Object RESULT =null;
		
         System.out.println("\nCiclo do-while \n"); 
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_while",20, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_while ::= WHILE PARENTESIS_APERTURA expresion_booleana PARENTESIS_CIERRE LLAVE_APER cuerpo_instrucciones LLAVE_CERR 
            {
              Object RESULT =null;
		
         System.out.println("\nCiclo while \n"); 
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_while",20, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_else ::= dec_if ELSE LLAVE_APER cuerpo_instrucciones LLAVE_CERR 
            {
              Object RESULT =null;
		
         System.out.println("\nCondicional else if \n"); 
        
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_else",19, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_if ::= IF PARENTESIS_APERTURA expresion_compuesta PARENTESIS_CIERRE LLAVE_APER cuerpo_instrucciones LLAVE_CERR 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_if",12, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-6)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpoclase ::= dec_funcion cuerpoclase 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("cuerpoclase",13, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpoclase ::= dec_funcion 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("cuerpoclase",13, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_clases ::= CLASS ID LLAVE_APER PUBLIC cuerpoclase LLAVE_CERR 
            {
              Object RESULT =null;
		 
    System.out.println("\nDeclaracion de clases\n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_clases",5, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-5)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_paquetes ::= PACKAGE lista_carpetas PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("\nDeclaracion de espacio de nombres\n"); 
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_paquetes",3, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_importaciones ::= IMPORT OPERADOR_MEQ lista_carpetas OPERADOR_MAQ lista_importaciones 
            {
              Object RESULT =null;
		
         System.out.println("\nDeclaracion de varias importaciones\n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_importaciones",10, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-4)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_importaciones ::= IMPORT OPERADOR_MEQ lista_carpetas OPERADOR_MAQ 
            {
              Object RESULT =null;
		
         System.out.println("\nDeclaracion de importacion\n"); 
    
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_importaciones",10, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_importaciones ::= lista_importaciones 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("dec_importaciones",4, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_carpetas ::= ID PUNTO lista_carpetas 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_carpetas",11, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_carpetas ::= ID 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("lista_carpetas",11, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= dec_importaciones dec_paquetes paraconst dec_funcion 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= dec_importaciones dec_paquetes dec_variables dec_funcion 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-3)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_importaciones dec_paquetes dec_funcion 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-2)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentencia ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("sentencia",0, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          return CUP$Parsercpp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencia EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)).value;
		RESULT = start_val;
              CUP$Parsercpp$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.elementAt(CUP$Parsercpp$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercpp$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parsercpp$parser.done_parsing();
          return CUP$Parsercpp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

