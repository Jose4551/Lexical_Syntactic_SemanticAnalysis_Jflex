/* The following code was generated by JFlex 1.6.1 */

/* AGUIRRE GAYTAN ADRIAN
CALLEROS RODRIGUEZ JOSE GUILLERMO
LOPEZ ZEPEDA CARLOS
PULIDO VAZQUEZ MARIANA PAOLA
c++*/
package demo_cup;

/*more package*/
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/demo_cup/Democup_cpp.flex</tt>
 */
public class Scannercpp implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\4\1\4\1\3\22\0\1\34\1\53\1\65"+
    "\1\35\2\0\1\51\1\64\1\45\1\46\1\5\1\54\1\37\1\55"+
    "\1\40\1\2\12\61\1\42\1\41\1\56\1\36\1\57\2\0\6\63"+
    "\24\63\1\47\1\66\1\50\1\0\1\60\1\0\1\15\1\16\1\17"+
    "\1\23\1\25\1\14\1\13\1\21\1\6\2\62\1\11\1\26\1\7"+
    "\1\12\1\27\1\62\1\22\1\20\1\10\1\24\1\31\1\30\1\62"+
    "\1\33\1\32\1\43\1\52\1\44\7\0\1\4\u1fa2\0\1\4\1\4"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\22\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\2\1\1\30\1\0\1\6\1\31"+
    "\24\6\1\32\11\6\1\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\1\0\1\27\2\0\1\42"+
    "\2\0\1\43\1\6\1\44\3\6\1\45\5\6\1\46"+
    "\33\6\1\0\1\41\1\6\1\47\1\27\1\50\1\0"+
    "\1\51\1\0\1\6\1\52\1\6\1\53\2\6\1\54"+
    "\3\6\1\55\2\6\1\56\1\57\15\6\1\60\6\6"+
    "\1\61\1\6\1\0\1\41\1\6\1\47\1\27\1\0"+
    "\1\6\1\62\5\6\1\63\1\64\1\65\1\66\5\6"+
    "\1\67\4\6\1\70\1\6\1\71\4\6\1\72\2\6"+
    "\1\0\1\41\1\6\1\27\1\51\2\6\1\73\3\6"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\6"+
    "\1\103\1\6\1\0\3\6\1\104\2\6\1\0\1\41"+
    "\1\6\1\27\3\6\1\105\3\6\1\0\1\106\1\107"+
    "\1\6\1\110\1\6\1\0\1\41\1\6\1\27\1\6"+
    "\1\111\1\112\1\113\1\114\1\115\1\0\1\6\1\116"+
    "\1\117\1\41\1\6\1\27\1\120\1\0\1\121\1\41"+
    "\1\6\1\27\1\0\1\41\1\6\1\27\1\0\1\41"+
    "\1\6\1\27\1\0\1\41\1\6\1\0\1\41\1\6"+
    "\1\0\1\41\1\6\1\122\1\41\1\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\1\41\1\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\1\41\1\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\1\41\1\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\1\41\1\6\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\67\0\334\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u0528\0\u055f\0\u0596\0\67"+
    "\0\67\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u074e\0\u0785\0\u01ef\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u06e0\0\67\0\u0f78"+
    "\0\u0faf\0\u01ef\0\u0fe6\0\u01ef\0\u101d\0\u1054\0\u108b\0\u01ef"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u01ef\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\67\0\u18b5"+
    "\0\67\0\u18ec\0\u1923\0\u01ef\0\u195a\0\u01ef\0\u1991\0\u19c8"+
    "\0\u01ef\0\u19ff\0\u1a36\0\u1a6d\0\u01ef\0\u1aa4\0\u1adb\0\u01ef"+
    "\0\u01ef\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u01ef\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u01ef\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\67\0\u2003\0\u203a\0\u2071\0\u01ef\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u01ef\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u01ef\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u01ef\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u01ef\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u074e\0\u263e\0\u2675\0\u01ef\0\u26ac\0\u26e3\0\u271a\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u2751\0\u01ef"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u01ef\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u01ef"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u01ef\0\u01ef\0\u2b66\0\u01ef"+
    "\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u01ef\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u2ce7\0\u2d1e\0\u01ef\0\67\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u01ef\0\u2dfa\0\u01ef\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\67\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390"+
    "\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548"+
    "\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700"+
    "\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\u38ef\0\u3926\0\u395d\0\u3994\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\14\1\16\1\17"+
    "\1\20\1\14\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\14\1\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\14\1\54\1\56\1\57\1\2\70\0\1\3"+
    "\1\0\1\3\30\0\1\3\34\0\1\60\2\0\1\61"+
    "\67\0\1\14\1\62\4\14\1\63\17\14\25\0\3\14"+
    "\11\0\7\14\1\64\7\14\1\65\6\14\25\0\3\14"+
    "\11\0\13\14\1\66\1\67\2\14\1\70\5\14\1\71"+
    "\25\0\3\14\11\0\4\14\1\72\21\14\25\0\3\14"+
    "\11\0\21\14\1\73\4\14\25\0\3\14\11\0\26\14"+
    "\25\0\3\14\11\0\3\14\1\74\1\75\2\14\1\76"+
    "\16\14\25\0\3\14\11\0\4\14\1\77\21\14\25\0"+
    "\3\14\11\0\3\14\1\100\1\101\6\14\1\102\12\14"+
    "\25\0\3\14\11\0\1\103\1\14\1\104\10\14\1\105"+
    "\6\14\1\106\3\14\25\0\3\14\11\0\17\14\1\107"+
    "\6\14\25\0\3\14\11\0\4\14\1\110\21\14\25\0"+
    "\3\14\11\0\1\14\1\111\10\14\1\112\13\14\25\0"+
    "\3\14\11\0\3\14\1\113\22\14\25\0\3\14\11\0"+
    "\16\14\1\114\7\14\25\0\3\14\11\0\14\14\1\115"+
    "\1\14\1\116\7\14\25\0\3\14\11\0\13\14\1\117"+
    "\12\14\25\0\3\14\11\0\1\120\3\14\1\121\21\14"+
    "\25\0\3\14\11\0\1\122\116\0\1\123\101\0\1\124"+
    "\67\0\1\125\52\0\1\126\66\0\1\127\66\0\1\130"+
    "\36\0\26\14\24\0\1\131\1\132\1\14\1\132\43\0"+
    "\1\133\20\0\1\134\5\0\3\135\2\0\62\135\65\136"+
    "\1\137\1\140\3\60\2\0\62\60\5\61\1\141\61\61"+
    "\6\0\2\14\1\142\23\14\25\0\3\14\11\0\20\14"+
    "\1\143\5\14\25\0\3\14\11\0\22\14\1\144\3\14"+
    "\25\0\3\14\11\0\1\145\13\14\1\146\11\14\25\0"+
    "\3\14\11\0\16\14\1\147\6\14\1\150\25\0\3\14"+
    "\11\0\20\14\1\151\5\14\25\0\3\14\11\0\21\14"+
    "\1\152\4\14\25\0\3\14\11\0\1\14\1\153\24\14"+
    "\25\0\3\14\11\0\17\14\1\154\6\14\25\0\3\14"+
    "\11\0\4\14\1\155\21\14\25\0\3\14\11\0\14\14"+
    "\1\156\11\14\25\0\3\14\11\0\3\14\1\157\22\14"+
    "\25\0\3\14\11\0\4\14\1\160\21\14\25\0\3\14"+
    "\11\0\7\14\1\161\16\14\25\0\3\14\11\0\1\14"+
    "\1\162\14\14\1\163\7\14\25\0\3\14\11\0\7\14"+
    "\1\164\16\14\25\0\3\14\11\0\5\14\1\165\16\14"+
    "\1\166\1\14\25\0\3\14\11\0\7\14\1\167\4\14"+
    "\1\170\11\14\25\0\3\14\11\0\4\14\1\171\21\14"+
    "\25\0\3\14\11\0\1\172\25\14\25\0\3\14\11\0"+
    "\2\14\1\173\2\14\1\174\20\14\25\0\3\14\11\0"+
    "\16\14\1\175\7\14\25\0\3\14\11\0\1\176\11\14"+
    "\1\177\13\14\25\0\3\14\11\0\1\200\25\14\25\0"+
    "\3\14\11\0\12\14\1\201\13\14\25\0\3\14\11\0"+
    "\2\14\1\202\23\14\25\0\3\14\11\0\1\203\3\14"+
    "\1\204\21\14\25\0\3\14\11\0\10\14\1\205\15\14"+
    "\25\0\3\14\11\0\1\206\25\14\25\0\3\14\11\0"+
    "\14\14\1\207\11\14\25\0\3\14\11\0\1\210\2\14"+
    "\1\211\22\14\25\0\3\14\12\0\1\212\137\0\2\213"+
    "\1\0\1\213\11\0\26\14\24\0\1\213\1\214\1\14"+
    "\1\214\64\0\1\215\45\0\1\133\20\0\1\216\71\0"+
    "\1\217\70\0\1\220\2\61\1\221\2\61\1\222\61\61"+
    "\6\0\17\14\1\223\6\14\25\0\3\14\11\0\12\14"+
    "\1\224\13\14\25\0\3\14\11\0\4\14\1\225\21\14"+
    "\25\0\3\14\11\0\17\14\1\226\6\14\25\0\3\14"+
    "\11\0\21\14\1\227\4\14\25\0\3\14\11\0\17\14"+
    "\1\230\6\14\25\0\3\14\11\0\5\14\1\231\20\14"+
    "\25\0\3\14\11\0\14\14\1\232\11\14\25\0\3\14"+
    "\11\0\7\14\1\233\16\14\25\0\3\14\11\0\12\14"+
    "\1\234\13\14\25\0\3\14\11\0\3\14\1\235\22\14"+
    "\25\0\3\14\11\0\12\14\1\236\13\14\25\0\3\14"+
    "\11\0\12\14\1\237\13\14\25\0\3\14\11\0\2\14"+
    "\1\240\23\14\25\0\3\14\11\0\14\14\1\241\11\14"+
    "\25\0\3\14\11\0\1\14\1\242\24\14\25\0\3\14"+
    "\11\0\17\14\1\243\6\14\25\0\3\14\11\0\2\14"+
    "\1\244\23\14\25\0\3\14\11\0\1\245\15\14\1\246"+
    "\7\14\25\0\3\14\11\0\14\14\1\247\11\14\25\0"+
    "\3\14\11\0\2\14\1\250\23\14\25\0\3\14\11\0"+
    "\16\14\1\251\7\14\25\0\3\14\11\0\1\252\25\14"+
    "\25\0\3\14\11\0\10\14\1\253\15\14\25\0\3\14"+
    "\11\0\4\14\1\254\21\14\25\0\3\14\11\0\1\255"+
    "\25\14\25\0\3\14\11\0\1\14\1\256\24\14\25\0"+
    "\3\14\11\0\17\14\1\257\6\14\25\0\3\14\11\0"+
    "\7\14\1\260\16\14\25\0\3\14\11\0\23\14\1\261"+
    "\2\14\25\0\3\14\11\0\2\14\1\262\23\14\25\0"+
    "\3\14\11\0\3\14\1\263\22\14\25\0\3\14\11\0"+
    "\3\14\1\264\22\14\25\0\3\14\11\0\2\14\1\265"+
    "\23\14\25\0\3\14\11\0\15\14\1\266\10\14\25\0"+
    "\3\14\11\0\7\14\1\267\16\14\25\0\3\14\22\0"+
    "\1\270\127\0\2\271\1\0\1\271\11\0\26\14\24\0"+
    "\1\271\1\272\1\14\1\272\64\0\1\273\45\0\1\133"+
    "\20\0\1\274\5\0\3\136\2\0\62\136\5\61\1\275"+
    "\61\61\6\0\12\14\1\276\13\14\25\0\3\14\11\0"+
    "\22\14\1\277\3\14\25\0\3\14\11\0\3\14\1\300"+
    "\22\14\25\0\3\14\11\0\1\301\1\302\13\14\1\303"+
    "\10\14\25\0\3\14\11\0\7\14\1\304\16\14\25\0"+
    "\3\14\11\0\2\14\1\305\23\14\25\0\3\14\11\0"+
    "\17\14\1\306\6\14\25\0\3\14\11\0\12\14\1\307"+
    "\13\14\25\0\3\14\11\0\2\14\1\310\23\14\25\0"+
    "\3\14\11\0\17\14\1\311\6\14\25\0\3\14\11\0"+
    "\4\14\1\312\21\14\25\0\3\14\11\0\1\313\25\14"+
    "\25\0\3\14\11\0\1\14\1\314\24\14\25\0\3\14"+
    "\11\0\11\14\1\315\14\14\25\0\3\14\11\0\2\14"+
    "\1\316\23\14\25\0\3\14\11\0\11\14\1\317\14\14"+
    "\25\0\3\14\11\0\14\14\1\320\11\14\25\0\3\14"+
    "\11\0\12\14\1\321\13\14\25\0\3\14\11\0\3\14"+
    "\1\322\22\14\25\0\3\14\11\0\1\14\1\323\24\14"+
    "\25\0\3\14\11\0\5\14\1\324\20\14\25\0\3\14"+
    "\11\0\5\14\1\325\20\14\25\0\3\14\11\0\10\14"+
    "\1\326\15\14\25\0\3\14\11\0\7\14\1\327\16\14"+
    "\25\0\3\14\11\0\17\14\1\330\6\14\25\0\3\14"+
    "\11\0\1\331\25\14\25\0\3\14\11\0\17\14\1\332"+
    "\6\14\25\0\3\14\11\0\16\14\1\333\7\14\25\0"+
    "\3\14\11\0\2\14\1\334\23\14\25\0\3\14\14\0"+
    "\1\335\135\0\2\336\1\0\1\336\11\0\26\14\24\0"+
    "\1\336\1\337\1\14\1\337\43\0\1\133\20\0\1\340"+
    "\5\0\2\61\1\341\2\61\1\275\61\61\6\0\21\14"+
    "\1\342\4\14\25\0\3\14\11\0\7\14\1\343\16\14"+
    "\25\0\3\14\11\0\15\14\1\344\10\14\25\0\3\14"+
    "\11\0\7\14\1\345\16\14\25\0\3\14\11\0\17\14"+
    "\1\346\6\14\25\0\3\14\11\0\2\14\1\347\23\14"+
    "\25\0\3\14\11\0\15\14\1\350\10\14\25\0\3\14"+
    "\11\0\6\14\1\351\17\14\25\0\3\14\11\0\11\14"+
    "\1\352\14\14\25\0\3\14\11\0\5\14\1\353\20\14"+
    "\25\0\3\14\11\0\2\14\1\354\23\14\25\0\3\14"+
    "\11\0\13\14\1\355\12\14\25\0\3\14\11\0\1\14"+
    "\1\356\24\14\25\0\3\14\11\0\2\14\1\357\23\14"+
    "\25\0\3\14\11\0\17\14\1\360\6\14\25\0\3\14"+
    "\11\0\1\14\1\361\24\14\25\0\3\14\11\0\26\14"+
    "\1\362\24\0\3\14\11\0\3\14\1\363\22\14\25\0"+
    "\3\14\11\0\2\14\1\364\23\14\25\0\3\14\11\0"+
    "\11\14\1\365\14\14\25\0\3\14\11\0\11\14\1\366"+
    "\14\14\25\0\3\14\11\0\7\14\1\367\16\14\25\0"+
    "\3\14\11\0\1\370\25\14\25\0\3\14\27\0\1\371"+
    "\122\0\2\372\1\0\1\372\11\0\26\14\24\0\1\372"+
    "\1\373\1\14\1\373\43\0\1\133\20\0\1\374\13\0"+
    "\7\14\1\375\16\14\25\0\3\14\11\0\2\14\1\376"+
    "\23\14\25\0\3\14\11\0\20\14\1\377\5\14\25\0"+
    "\3\14\11\0\6\14\1\u0100\17\14\25\0\3\14\11\0"+
    "\4\14\1\u0101\21\14\25\0\3\14\11\0\17\14\1\u0102"+
    "\6\14\25\0\3\14\11\0\17\14\1\u0103\6\14\25\0"+
    "\3\14\12\0\1\u0104\65\0\17\14\1\u0105\6\14\25\0"+
    "\3\14\11\0\17\14\1\u0106\6\14\25\0\3\14\11\0"+
    "\2\14\1\u0107\23\14\25\0\3\14\11\0\3\14\1\u0108"+
    "\22\14\25\0\3\14\11\0\3\14\1\u0109\22\14\25\0"+
    "\3\14\26\0\1\u010a\123\0\2\u010b\1\0\1\u010b\11\0"+
    "\26\14\24\0\1\u010b\1\u010c\1\14\1\u010c\43\0\1\133"+
    "\20\0\1\u010d\13\0\11\14\1\u010e\14\14\25\0\3\14"+
    "\11\0\17\14\1\u010f\6\14\25\0\3\14\11\0\17\14"+
    "\1\u0110\6\14\25\0\3\14\11\0\14\14\1\u0111\11\14"+
    "\25\0\3\14\11\0\14\14\1\u0112\11\14\25\0\3\14"+
    "\11\0\15\14\1\u0113\10\14\25\0\3\14\20\0\1\u0114"+
    "\57\0\17\14\1\u0115\6\14\25\0\3\14\11\0\17\14"+
    "\1\u0116\6\14\25\0\3\14\30\0\1\u0117\121\0\2\u0118"+
    "\1\0\1\u0118\11\0\26\14\24\0\1\u0118\1\u0119\1\14"+
    "\1\u0119\43\0\1\133\20\0\1\u011a\13\0\17\14\1\u011b"+
    "\6\14\25\0\3\14\31\0\1\u011c\46\0\15\14\1\u011d"+
    "\10\14\25\0\3\14\63\0\2\u011e\1\0\1\u011e\11\0"+
    "\26\14\24\0\1\u011e\1\u011f\1\14\1\u011f\43\0\1\133"+
    "\20\0\1\u0120\32\0\1\u0121\121\0\2\u0122\1\0\1\u0122"+
    "\11\0\26\14\24\0\1\u0122\1\u0123\1\14\1\u0123\43\0"+
    "\1\133\20\0\1\u0124\25\0\1\u0125\126\0\2\u0126\1\0"+
    "\1\u0126\11\0\26\14\24\0\1\u0126\1\u0127\1\14\1\u0127"+
    "\43\0\1\133\20\0\1\u0128\34\0\1\u0129\117\0\2\u012a"+
    "\1\0\1\u012a\11\0\26\14\24\0\1\u012a\1\u012b\1\14"+
    "\1\u012b\64\0\1\u0128\22\0\1\u012c\131\0\2\u012d\1\0"+
    "\1\u012d\11\0\26\14\24\0\1\u012d\1\u012e\1\14\1\u012e"+
    "\22\0\1\u012f\127\0\2\u0130\1\0\1\u0130\11\0\26\14"+
    "\24\0\1\u0130\1\u0131\1\14\1\u0131\30\0\1\u0132\121\0"+
    "\2\u0133\1\0\1\u0133\11\0\26\14\24\0\1\u0133\1\u0134"+
    "\1\14\1\u0134\63\0\2\u0135\1\0\1\u0135\11\0\26\14"+
    "\24\0\1\u0135\1\u0136\1\14\1\u0136\63\0\2\u0137\1\0"+
    "\1\u0137\11\0\26\14\24\0\1\u0137\1\u0138\1\14\1\u0138"+
    "\63\0\2\u0139\1\0\1\u0139\11\0\26\14\24\0\1\u0139"+
    "\1\u013a\1\14\1\u013a\63\0\2\u013b\1\0\1\u013b\11\0"+
    "\26\14\24\0\1\u013b\1\u013c\1\14\1\u013c\63\0\2\u013d"+
    "\1\0\1\u013d\11\0\26\14\24\0\1\u013d\1\u013e\1\14"+
    "\1\u013e\63\0\2\u013f\1\0\1\u013f\11\0\26\14\24\0"+
    "\1\u013f\1\u0140\1\14\1\u0140\63\0\2\u0141\1\0\1\u0141"+
    "\11\0\26\14\24\0\1\u0141\1\u0142\1\14\1\u0142\63\0"+
    "\2\u0143\1\0\1\u0143\11\0\26\14\24\0\1\u0143\1\u0144"+
    "\1\14\1\u0144\63\0\2\u0145\1\0\1\u0145\11\0\26\14"+
    "\24\0\1\u0145\1\u0146\1\14\1\u0146\63\0\2\u0147\1\0"+
    "\1\u0147\11\0\26\14\24\0\1\u0147\1\u0148\1\14\1\u0148"+
    "\63\0\2\u0149\1\0\1\u0149\11\0\26\14\24\0\1\u0149"+
    "\1\u014a\1\14\1\u014a\63\0\2\u014b\1\0\1\u014b\11\0"+
    "\26\14\24\0\1\u014b\1\u014c\1\14\1\u014c\63\0\2\u014d"+
    "\1\0\1\u014d\11\0\26\14\24\0\1\u014d\1\u014e\1\14"+
    "\1\u014e\63\0\2\u014f\1\0\1\u014f\11\0\26\14\24\0"+
    "\1\u014f\1\u0150\1\14\1\u0150\63\0\2\u0151\1\0\1\u0151"+
    "\11\0\26\14\24\0\1\u0151\1\u0152\1\14\1\u0152\63\0"+
    "\2\u0153\1\0\1\u0153\11\0\26\14\24\0\1\u0153\1\u0154"+
    "\1\14\1\u0154\63\0\2\u0155\1\0\1\u0155\11\0\26\14"+
    "\24\0\1\u0155\3\14\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14795];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\24\1\12\11\3\1\2\11"+
    "\7\1\1\0\40\1\1\0\6\11\2\1\1\0\1\1"+
    "\2\0\1\11\2\0\50\1\1\0\4\1\1\11\1\0"+
    "\1\11\1\0\45\1\1\0\2\1\1\11\1\1\1\0"+
    "\37\1\1\0\24\1\1\0\6\1\1\0\12\1\1\0"+
    "\5\1\1\0\11\1\1\0\2\1\1\11\4\1\1\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\11\42\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private void descripcion(String token, String mensaje)
    {
    System.out.println("Linea: "+(yyline+1)+
                       " Columna: "+(yycolumn+1)+
                       " token: "+token+" --> "+mensaje);
    }

    private Symbol symbol(int type, Object value)
    {
        return new Symbol(type, (yyline+1), (yycolumn+1), value);}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scannercpp(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { descripcion(yytext(), "No es parte del lenguaje");
 return symbol (sym.ERROR, yytext());
            }
          case 83: break;
          case 2: 
            { /* ignorar espacion en blanco*/
            }
          case 84: break;
          case 3: 
            { descripcion(yytext(), "Operador division");
    return symbol(sym.DIVI, yytext());
            }
          case 85: break;
          case 4: 
            { System.out.print(yytext());
            }
          case 86: break;
          case 5: 
            { descripcion(yytext(), "Operador multiplicacion");
    return symbol(sym.MULTI, yytext());
            }
          case 87: break;
          case 6: 
            { descripcion(yytext(), "Un identificador");
    return symbol(sym.ID, yytext());
            }
          case 88: break;
          case 7: 
            { descripcion(yytext(), "Asignacion");
    return symbol(sym.ASIGNACION, yytext());
            }
          case 89: break;
          case 8: 
            { descripcion(yytext(), "Es una coma");
    return symbol(sym.COMA, yytext());
            }
          case 90: break;
          case 9: 
            { descripcion(yytext(), "Es un punto");
    return symbol(sym.PUNTO, yytext());
            }
          case 91: break;
          case 10: 
            { descripcion(yytext(), "Punto y coma");
    return symbol(sym.PUNTO_COMA, yytext());
            }
          case 92: break;
          case 11: 
            { descripcion(yytext(), "DOS PUNTOS");
    return symbol(sym.DOS_PUNTOS, yytext());
            }
          case 93: break;
          case 12: 
            { descripcion(yytext(), "Llave de apertura");
    return symbol(sym.LLAVE_APER, yytext());
            }
          case 94: break;
          case 13: 
            { descripcion(yytext(), "Llave de cierre");
    return symbol(sym.LLAVE_CERR, yytext());
            }
          case 95: break;
          case 14: 
            { descripcion(yytext(), "PARENTESIS DE APERTURA");
    return symbol(sym.PARENTESIS_APERTURA, yytext());
            }
          case 96: break;
          case 15: 
            { descripcion(yytext(), "PARENTESIS DE CIERRE");
    return symbol(sym.PARENTESIS_CIERRE, yytext());
            }
          case 97: break;
          case 16: 
            { descripcion(yytext(), "CORCHETE DE APERTURA");
    return symbol(sym.CORCHETE_APERTURA, yytext());
            }
          case 98: break;
          case 17: 
            { descripcion(yytext(), "CORCHETE DE CIERRE");
    return symbol(sym.CORCHETE_CIERRE, yytext());
            }
          case 99: break;
          case 18: 
            { descripcion(yytext(), "Operador logico not");
    return symbol(sym.NOT, yytext());
            }
          case 100: break;
          case 19: 
            { descripcion(yytext(), "Operador suma");
    return symbol(sym.OPERADOR_ARITMETICO, yytext());
            }
          case 101: break;
          case 20: 
            { descripcion(yytext(), "Operador resta");
    return symbol(sym.RESTA, yytext());
            }
          case 102: break;
          case 21: 
            { descripcion(yytext(), "Operador menor que");
    return symbol(sym.OPERADOR_MEQ, yytext());
            }
          case 103: break;
          case 22: 
            { descripcion(yytext(), "Operador mayor que");
    return symbol(sym.OPERADOR_MAQ, yytext());
            }
          case 104: break;
          case 23: 
            { descripcion(yytext(), "Es un numero entero");
    return symbol(sym.ENTERO, yytext());
            }
          case 105: break;
          case 24: 
            { descripcion(yytext(),"COMENTARIO UNILINEA");
        return symbol(sym.COMENTARIOU, yytext());
            }
          case 106: break;
          case 25: 
            { descripcion(yytext(), "Condicional if");
    return symbol(sym.IF, yytext());
            }
          case 107: break;
          case 26: 
            { descripcion(yytext(), "Inicia un do-while");
    return symbol(sym.DO, yytext());
            }
          case 108: break;
          case 27: 
            { descripcion(yytext(), "Operador comparacion de igualdad");
    return symbol(sym.OPERADOR_RELACIONAL, yytext());
            }
          case 109: break;
          case 28: 
            { descripcion(yytext(), "Operador logico and");
    return symbol(sym.AND, yytext());
            }
          case 110: break;
          case 29: 
            { descripcion(yytext(), "Operador logico or");
    return symbol(sym.OR, yytext());
            }
          case 111: break;
          case 30: 
            { descripcion(yytext(), "Operador diferente que");
    return symbol(sym.OPERADOR_D, yytext());
            }
          case 112: break;
          case 31: 
            { descripcion(yytext(), "Operador menor igual que");
    return symbol(sym.OPERADOR_MEIQ, yytext());
            }
          case 113: break;
          case 32: 
            { descripcion(yytext(), "Operador mayor igual que");
    return symbol(sym.OPERADOR_MAIQ, yytext());
            }
          case 114: break;
          case 33: 
            { descripcion(yytext(), "Es una constante");
    return symbol(sym.CONSTANTE, yytext());
            }
          case 115: break;
          case 34: 
            { descripcion(yytext(), "Cadena");
    return symbol(sym.CADENA, yytext());
            }
          case 116: break;
          case 35: 
            { descripcion(yytext(), "Tipo de dato int");
    return symbol(sym.INT, yytext());
            }
          case 117: break;
          case 36: 
            { descripcion(yytext(), "Crea un objeto");
    return symbol(sym.NEW, yytext());
            }
          case 118: break;
          case 37: 
            { descripcion(yytext(), "Ejecuta código que puede lanzar una excepción");
    return symbol(sym.TRY, yytext());
            }
          case 119: break;
          case 38: 
            { descripcion(yytext(), "estructura de ciclo for");
    return symbol(sym.FOR, yytext());
            }
          case 120: break;
          case 39: 
            { descripcion(yytext(), "es flotante");
    return symbol(sym.FLOTANTE, yytext());
            }
          case 121: break;
          case 40: 
            { descripcion(yytext(), "es caracter");
    return symbol(sym.CARACTER, yytext());
            }
          case 122: break;
          case 41: 
            { descripcion(yytext(),"COMENTARIO MULTILINEA");
        return symbol(sym.COMENTARIOM, yytext());
            }
          case 123: break;
          case 42: 
            { descripcion(yytext(), "Puntero privado al objeto actual de una clase");
    return symbol(sym.THIS, yytext());
            }
          case 124: break;
          case 43: 
            { descripcion(yytext(), "Valor booleano verdadero");
    return symbol(sym.TRUE, yytext());
            }
          case 125: break;
          case 44: 
            { descripcion(yytext(), "Tipo de dato long");
    return symbol(sym.LONG, yytext());
            }
          case 126: break;
          case 45: 
            { descripcion(yytext(), "Tipo de dato boolean");
    return symbol(sym.BOOL, yytext());
            }
          case 127: break;
          case 46: 
            { descripcion(yytext(), "impresion");
    return symbol(sym.COUT, yytext());
            }
          case 128: break;
          case 47: 
            { descripcion(yytext(), "Tipo de dato char");
    return symbol(sym.CHAR, yytext());
            }
          case 129: break;
          case 48: 
            { descripcion(yytext(), "Condicional else");
    return symbol(sym.ELSE, yytext());
            }
          case 130: break;
          case 49: 
            { descripcion(yytext(), "Tipo de dato void");
    return symbol(sym.VOID, yytext());
            }
          case 131: break;
          case 50: 
            { descripcion(yytext(), "Arroja una excepción");
    return symbol(sym.THROW, yytext());
            }
          case 132: break;
          case 51: 
            { descripcion(yytext(), "Tipo de dato float");
    return symbol(sym.FLOAT, yytext());
            }
          case 133: break;
          case 52: 
            { descripcion(yytext(), "Valor booleano falso");
    return symbol(sym.FALSE, yytext());
            }
          case 134: break;
          case 53: 
            { descripcion(yytext(), "Declaración de clase");
    return symbol(sym.CLASS, yytext());
            }
          case 135: break;
          case 54: 
            { descripcion(yytext(), "palabra reservada de constante");
    return symbol(sym.CONST, yytext());
            }
          case 136: break;
          case 55: 
            { descripcion(yytext(), "Variable de tipo entero corto");
    return symbol(sym.SHORT, yytext());
            }
          case 137: break;
          case 56: 
            { descripcion(yytext(), "Funde múltiples valores en una misma ubicación en la memoria");
    return symbol(sym.UNION, yytext());
            }
          case 138: break;
          case 57: 
            { descripcion(yytext(), "Importa un nombre o símbolo de un namespace en el ámbito actual");
    return symbol(sym.USING, yytext());
            }
          case 139: break;
          case 58: 
            { descripcion(yytext(), "Inicia o termina un bucle");
    return symbol(sym.WHILE, yytext());
            }
          case 140: break;
          case 59: 
            { descripcion(yytext(), "Retorna información sobre un objeto");
    return symbol(sym.TYPEID, yytext());
            }
          case 141: break;
          case 60: 
            { descripcion(yytext(), "Variable entera como tipo signo");
    return symbol(sym.SIGNED, yytext());
            }
          case 142: break;
          case 61: 
            { descripcion(yytext(), "Obtiene la capacidad de memoria");
    return symbol(sym.SIZEOF, yytext());
            }
          case 143: break;
          case 62: 
            { descripcion(yytext(), "Crea almacenamiento para una variable");
    return symbol(sym.STATIC, yytext());
            }
          case 144: break;
          case 63: 
            { descripcion(yytext(), "Tipo de dato string");
    return symbol(sym.STRING, yytext());
            }
          case 145: break;
          case 64: 
            { descripcion(yytext(), "Define una estructura");
    return symbol(sym.STRUCT, yytext());
            }
          case 146: break;
          case 65: 
            { descripcion(yytext(), "Define una estructura");
    return symbol(sym.SWITCH, yytext());
            }
          case 147: break;
          case 66: 
            { descripcion(yytext(), "Retorna desde una función");
    return symbol(sym.RETURN, yytext());
            }
          case 148: break;
          case 67: 
            { descripcion(yytext(), "Tipo de dato double");
    return symbol(sym.DOUBLE, yytext());
            }
          case 149: break;
          case 68: 
            { descripcion(yytext(), "Declara componentes públicos de una clase");
    return symbol(sym.PUBLIC, yytext());
            }
          case 150: break;
          case 69: 
            { descripcion(yytext(), "Crea un alias para un tipo de datos");
    return symbol(sym.TYPEDEF, yytext());
            }
          case 151: break;
          case 70: 
            { descripcion(yytext(), "Quita propiedad const de un objeto");
    return symbol(sym.MUTABLE, yytext());
            }
          case 152: break;
          case 71: 
            { descripcion(yytext(), "Declara componentes privados de una clase");
    return symbol(sym.PRIVATE, yytext());
            }
          case 153: break;
          case 72: 
            { descripcion(yytext(), "Crea una función método que puede ser reemplazada por clases derivadas");
    return symbol(sym.VIRTUAL, yytext());
            }
          case 154: break;
          case 73: 
            { descripcion(yytext(), "Crea una plantilla para código de funciones u objetos");
    return symbol(sym.TEMPLATE, yytext());
            }
          case 155: break;
          case 74: 
            { descripcion(yytext(), "Declara que el próximo identificador es un tipo de datos");
    return symbol(sym.TYPENAME, yytext());
            }
          case 156: break;
          case 75: 
            { descripcion(yytext(), "Crea funciones operador sobrecargadas");
    return symbol(sym.OPERATOR, yytext());
            }
          case 157: break;
          case 76: 
            { descripcion(yytext(), "Almacena una variable en un registro máquina");
    return symbol(sym.REGISTER, yytext());
            }
          case 158: break;
          case 77: 
            { descripcion(yytext(), "Declara variable entera como sin signo");
    return symbol(sym.UNSIGNED, yytext());
            }
          case 159: break;
          case 78: 
            { descripcion(yytext(), "Factor externo al programa");
    return symbol(sym.VOLATILE, yytext());
            }
          case 160: break;
          case 79: 
            { descripcion(yytext(), "Declaración de importaciones");
    return symbol(sym.IMPORT, yytext());
            }
          case 161: break;
          case 80: 
            { descripcion(yytext(), "Particiona espacio de nombres al definir");
    return symbol(sym.NAMESPACE, yytext());
            }
          case 162: break;
          case 81: 
            { descripcion(yytext(), "Declara componentes protegidos de una clase");
    return symbol(sym.PROTECTED, yytext());
            }
          case 163: break;
          case 82: 
            { descripcion(yytext(), "Declaración de package");
    return symbol(sym.PACKAGE, yytext());
            }
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scannercpp [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scannercpp scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scannercpp(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
