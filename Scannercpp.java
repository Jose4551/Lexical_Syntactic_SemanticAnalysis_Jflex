/* The following code was generated by JFlex 1.6.1 */

/* AGUIRRE GAYTAN ADRIAN
CALLEROS RODRIGUEZ JOSE GUILLERMO
LOPEZ ZEPEDA CARLOS
PULIDO VAZQUEZ MARIANA PAOLA
c++*/
package lexico;
/*more package*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexico_cpp.flex</tt>
 */
public class Scannercpp {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\46\1\50\1\50\1\47\22\0\1\1\1\44\1\51"+
    "\3\0\1\37\1\35\1\45\1\45\1\42\1\41\1\0\1\41\1\36"+
    "\1\43\12\33\2\0\3\44\2\0\6\34\24\34\1\45\1\52\1\45"+
    "\1\0\1\32\1\0\1\7\1\2\1\11\1\20\1\6\1\21\1\24"+
    "\1\14\1\16\1\34\1\10\1\4\1\25\1\15\1\3\1\23\1\34"+
    "\1\5\1\12\1\13\1\17\1\27\1\26\1\22\1\31\1\30\1\45"+
    "\1\40\1\45\7\0\1\50\u1fa2\0\1\50\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\22\3\1\4\2\1\1\5\2\6"+
    "\1\5\1\7\1\10\1\1\27\3\1\11\2\3\1\12"+
    "\11\3\1\4\3\0\1\13\1\0\1\14\2\0\1\15"+
    "\1\0\25\3\1\16\4\3\1\17\2\3\1\20\20\3"+
    "\1\4\1\21\1\0\2\22\1\23\1\24\1\0\2\25"+
    "\1\0\1\3\1\26\2\3\1\27\2\3\1\30\4\3"+
    "\1\31\1\3\1\32\6\3\1\33\2\3\1\34\21\3"+
    "\1\35\1\3\1\4\1\21\1\36\1\37\1\0\1\22"+
    "\1\40\1\0\1\41\1\42\1\3\1\43\4\3\1\44"+
    "\1\3\1\45\1\46\2\3\1\47\4\3\1\50\5\3"+
    "\1\51\1\3\1\52\4\3\1\53\4\3\1\54\2\3"+
    "\1\4\1\0\1\55\1\37\1\0\1\22\1\0\2\3"+
    "\1\56\3\3\1\57\1\60\1\61\1\62\1\63\2\3"+
    "\1\64\2\3\1\65\1\3\1\66\1\67\1\3\1\70"+
    "\2\3\1\71\3\3\1\4\1\0\1\55\1\0\1\22"+
    "\1\41\7\3\1\72\2\3\1\73\1\3\1\74\1\75"+
    "\1\3\1\76\1\4\1\0\1\55\1\0\1\22\1\3"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\3\1\105"+
    "\1\3\1\106\1\4\1\0\1\55\1\0\1\22\1\3"+
    "\1\107\1\110\2\0\1\55\1\0\1\22\1\3\2\0"+
    "\1\55\1\0\1\22\1\3\1\0\1\55\1\0\1\22"+
    "\1\3\1\0\1\55\1\0\1\3\1\55\1\0\1\3"+
    "\1\55\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\13\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\53\0\u0433\0\53\0\53\0\53\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1"+
    "\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0489\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\53"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\53\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70"+
    "\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u0bed\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u0bed\0\u1020\0\u104b\0\u0bed\0\u1076\0\u10a1\0\u10cc\0\u10f7"+
    "\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\53"+
    "\0\u13a7\0\53\0\53\0\u13d2\0\u0b6c\0\u13fd\0\u1428\0\u1453"+
    "\0\u1453\0\u147e\0\u14a9\0\u1453\0\u14d4\0\u14ff\0\u1453\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u1453\0\u15d6\0\u1453\0\u1601\0\u162c"+
    "\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1453\0\u1703\0\u172e\0\u1453"+
    "\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1453\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\53\0\u1b61\0\53\0\u0b6c\0\u1b8c\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1b8c\0\u1c63\0\u1b8c\0\u1b8c\0\u1c8e"+
    "\0\u1cb9\0\u1b8c\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1b8c\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1b8c\0\u1e67\0\u1b8c\0\u1e92"+
    "\0\u1ebd\0\u1ee8\0\u1f13\0\u1b8c\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf"+
    "\0\u1b8c\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\53\0\u20c1"+
    "\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2142\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2142\0\u2142\0\u2142\0\u2142\0\u2142\0\u2219\0\u2244\0\u2142"+
    "\0\u226f\0\u229a\0\u2142\0\u22c5\0\u2142\0\u2142\0\u22f0\0\u2142"+
    "\0\u231b\0\u2346\0\u2142\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d"+
    "\0\u2448\0\u2473\0\u249e\0\u0b16\0\u24c9\0\u24f4\0\u251f\0\u254a"+
    "\0\u2575\0\u25a0\0\u25cb\0\u24c9\0\u25f6\0\u2621\0\u24c9\0\u264c"+
    "\0\u24c9\0\u24c9\0\u2677\0\u24c9\0\u26a2\0\u26cd\0\u26f8\0\u2723"+
    "\0\u274e\0\u2779\0\u2779\0\u2779\0\u2779\0\u2779\0\u2779\0\u2779"+
    "\0\u27a4\0\u2779\0\u27cf\0\u2779\0\u27fa\0\u2825\0\u2850\0\u287b"+
    "\0\u28a6\0\u28d1\0\u28d1\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d"+
    "\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5"+
    "\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d"+
    "\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\53\0\u2d04\0\u2d2f\0\u2d5a"+
    "\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2"+
    "\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a"+
    "\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1\0\u310c\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\14\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\11\1\22\1\11\1\23\1\24\1\25\3\11"+
    "\1\26\1\11\1\27\1\2\1\30\1\31\2\32\1\33"+
    "\1\34\1\35\2\3\1\36\1\37\1\2\54\0\1\3"+
    "\44\0\2\3\5\0\1\40\1\41\1\40\1\42\24\40"+
    "\1\0\2\40\20\0\21\40\1\43\6\40\1\0\2\40"+
    "\20\0\1\40\1\44\26\40\1\0\2\40\20\0\4\40"+
    "\1\45\23\40\1\0\2\40\20\0\2\40\1\46\15\40"+
    "\1\47\7\40\1\0\2\40\20\0\30\40\1\0\2\40"+
    "\20\0\1\40\1\50\1\51\2\40\1\52\4\40\1\53"+
    "\15\40\1\0\2\40\20\0\11\40\1\54\1\55\1\40"+
    "\1\56\7\40\1\57\3\40\1\0\2\40\20\0\3\40"+
    "\1\60\1\61\5\40\1\62\14\40\1\63\1\0\2\40"+
    "\20\0\4\40\1\64\1\65\22\40\1\0\2\40\20\0"+
    "\13\40\1\66\3\40\1\67\10\40\1\0\2\40\20\0"+
    "\10\40\1\70\2\40\1\71\14\40\1\0\2\40\20\0"+
    "\1\40\1\72\2\40\1\73\23\40\1\0\2\40\20\0"+
    "\3\40\1\74\1\40\1\75\22\40\1\0\2\40\20\0"+
    "\3\40\1\76\11\40\1\77\12\40\1\0\2\40\20\0"+
    "\15\40\1\100\12\40\1\0\2\40\20\0\12\40\1\101"+
    "\15\40\1\0\2\40\20\0\1\40\1\102\12\40\1\103"+
    "\13\40\1\0\2\40\51\0\1\104\2\0\1\105\16\0"+
    "\30\106\2\0\1\106\1\107\54\0\1\110\53\0\1\110"+
    "\54\0\1\111\1\112\7\0\2\113\30\114\2\113\1\114"+
    "\14\113\1\115\1\116\2\0\30\117\1\0\2\117\20\0"+
    "\1\117\1\120\26\117\1\0\2\117\20\0\4\117\1\121"+
    "\23\117\1\0\2\117\20\0\4\117\1\122\23\117\1\0"+
    "\2\117\20\0\13\117\1\123\14\117\1\0\2\117\20\0"+
    "\11\117\1\124\10\117\1\125\5\117\1\0\2\117\20\0"+
    "\10\117\1\126\17\117\1\0\2\117\20\0\21\117\1\127"+
    "\6\117\1\0\2\117\20\0\13\117\1\130\14\117\1\0"+
    "\2\117\20\0\5\117\1\131\22\117\1\0\2\117\20\0"+
    "\10\117\1\132\1\133\16\117\1\0\2\117\20\0\5\117"+
    "\1\134\22\117\1\0\2\117\20\0\3\117\1\135\1\117"+
    "\1\136\22\117\1\0\2\117\20\0\1\117\1\137\26\117"+
    "\1\0\2\117\20\0\22\117\1\140\3\117\1\141\1\117"+
    "\1\0\2\117\20\0\14\117\1\142\13\117\1\0\2\117"+
    "\20\0\15\117\1\143\11\117\1\144\1\0\2\117\20\0"+
    "\23\117\1\145\4\117\1\0\2\117\20\0\3\117\1\146"+
    "\10\117\1\147\13\117\1\0\2\117\20\0\21\117\1\150"+
    "\6\117\1\0\2\117\20\0\24\117\1\151\3\117\1\0"+
    "\2\117\20\0\23\117\1\152\4\117\1\0\2\117\20\0"+
    "\2\117\1\153\6\117\1\154\16\117\1\0\2\117\20\0"+
    "\14\117\1\155\13\117\1\0\2\117\20\0\10\117\1\156"+
    "\3\117\1\157\13\117\1\0\2\117\20\0\15\117\1\160"+
    "\12\117\1\0\2\117\20\0\2\117\1\161\14\117\1\162"+
    "\10\117\1\0\2\117\20\0\14\117\1\163\13\117\1\0"+
    "\2\117\20\0\2\117\1\164\25\117\1\0\2\117\20\0"+
    "\1\117\1\165\12\117\1\166\13\117\1\0\2\117\20\0"+
    "\1\167\27\117\1\0\2\117\20\0\11\117\1\170\16\117"+
    "\1\0\2\117\20\0\14\117\1\171\13\117\1\0\2\117"+
    "\20\0\2\117\1\172\11\117\1\173\13\117\1\0\2\117"+
    "\20\0\3\117\1\174\24\117\1\0\2\117\51\0\1\175"+
    "\2\0\1\105\47\0\1\176\2\0\1\177\14\0\2\200"+
    "\30\201\2\200\1\201\1\202\15\200\2\0\30\203\2\0"+
    "\1\203\16\0\42\111\1\204\10\111\46\112\3\0\2\112"+
    "\51\113\1\115\1\116\2\113\30\114\2\113\1\114\11\113"+
    "\1\205\1\206\1\205\1\115\1\116\52\0\1\207\2\0"+
    "\30\210\1\0\2\210\20\0\2\210\1\211\25\210\1\0"+
    "\2\210\20\0\5\210\1\212\22\210\1\0\2\210\20\0"+
    "\3\210\1\213\24\210\1\0\2\210\20\0\22\210\1\214"+
    "\5\210\1\0\2\210\20\0\15\210\1\215\12\210\1\0"+
    "\2\210\20\0\14\210\1\216\13\210\1\0\2\210\20\0"+
    "\4\210\1\217\23\210\1\0\2\210\20\0\2\210\1\220"+
    "\25\210\1\0\2\210\20\0\10\210\1\221\1\222\16\210"+
    "\1\0\2\210\20\0\10\210\1\223\17\210\1\0\2\210"+
    "\20\0\4\210\1\224\23\210\1\0\2\210\20\0\7\210"+
    "\1\225\20\210\1\0\2\210\20\0\3\210\1\226\24\210"+
    "\1\0\2\210\20\0\15\210\1\227\12\210\1\0\2\210"+
    "\20\0\11\210\1\230\16\210\1\0\2\210\20\0\3\210"+
    "\1\231\24\210\1\0\2\210\20\0\13\210\1\232\14\210"+
    "\1\0\2\210\20\0\4\210\1\233\23\210\1\0\2\210"+
    "\20\0\11\210\1\234\16\210\1\0\2\210\20\0\4\210"+
    "\1\235\23\210\1\0\2\210\20\0\21\210\1\236\6\210"+
    "\1\0\2\210\20\0\1\210\1\237\26\210\1\0\2\210"+
    "\20\0\10\210\1\240\17\210\1\0\2\210\20\0\4\210"+
    "\1\241\23\210\1\0\2\210\20\0\4\210\1\242\23\210"+
    "\1\0\2\210\20\0\14\210\1\243\13\210\1\0\2\210"+
    "\20\0\13\210\1\244\14\210\1\0\2\210\20\0\14\210"+
    "\1\245\13\210\1\0\2\210\20\0\1\210\1\246\26\210"+
    "\1\0\2\210\20\0\1\247\27\210\1\0\2\210\20\0"+
    "\4\210\1\250\23\210\1\0\2\210\20\0\5\210\1\251"+
    "\22\210\1\0\2\210\20\0\4\210\1\252\23\210\1\0"+
    "\2\210\20\0\10\210\1\253\17\210\1\0\2\210\20\0"+
    "\11\210\1\254\16\210\1\0\2\210\20\0\25\210\1\255"+
    "\2\210\1\0\2\210\20\0\2\210\1\256\25\210\1\0"+
    "\2\210\20\0\5\210\1\257\22\210\1\0\2\210\20\0"+
    "\2\210\1\260\25\210\1\0\2\210\20\0\5\210\1\261"+
    "\22\210\1\0\2\210\20\0\16\210\1\262\11\210\1\0"+
    "\2\210\20\0\11\210\1\263\16\210\1\0\2\210\51\0"+
    "\1\264\2\0\1\105\47\0\1\265\2\0\1\266\47\0"+
    "\1\267\2\0\1\270\14\0\2\200\30\271\2\200\1\271"+
    "\1\272\15\200\42\111\1\273\1\274\7\111\46\113\1\275"+
    "\2\113\1\115\1\116\46\113\3\0\2\113\2\0\30\276"+
    "\1\0\2\276\20\0\6\276\1\277\21\276\1\0\2\276"+
    "\20\0\5\276\1\300\22\276\1\0\2\276\20\0\3\276"+
    "\1\301\24\276\1\0\2\276\20\0\10\276\1\302\17\276"+
    "\1\0\2\276\20\0\14\276\1\303\13\276\1\0\2\276"+
    "\20\0\11\276\1\304\16\276\1\0\2\276\20\0\14\276"+
    "\1\305\13\276\1\0\2\276\20\0\10\276\1\306\17\276"+
    "\1\0\2\276\20\0\12\276\1\307\15\276\1\0\2\276"+
    "\20\0\7\276\1\310\20\276\1\0\2\276\20\0\14\276"+
    "\1\311\13\276\1\0\2\276\20\0\11\276\1\312\16\276"+
    "\1\0\2\276\20\0\4\276\1\313\23\276\1\0\2\276"+
    "\20\0\1\276\1\314\26\276\1\0\2\276\20\0\7\276"+
    "\1\315\20\276\1\0\2\276\20\0\2\276\1\316\25\276"+
    "\1\0\2\276\20\0\24\276\1\317\3\276\1\0\2\276"+
    "\20\0\13\276\1\320\1\321\1\276\1\322\11\276\1\0"+
    "\2\276\20\0\10\276\1\323\17\276\1\0\2\276\20\0"+
    "\13\276\1\324\14\276\1\0\2\276\20\0\22\276\1\325"+
    "\5\276\1\0\2\276\20\0\22\276\1\326\5\276\1\0"+
    "\2\276\20\0\13\276\1\327\14\276\1\0\2\276\20\0"+
    "\2\276\1\330\25\276\1\0\2\276\20\0\11\276\1\331"+
    "\16\276\1\0\2\276\20\0\15\276\1\332\12\276\1\0"+
    "\2\276\20\0\13\276\1\333\14\276\1\0\2\276\20\0"+
    "\4\276\1\334\23\276\1\0\2\276\20\0\4\276\1\335"+
    "\23\276\1\0\2\276\20\0\5\276\1\336\22\276\1\0"+
    "\2\276\20\0\14\276\1\337\13\276\1\0\2\276\20\0"+
    "\1\340\27\276\1\0\2\276\20\0\4\276\1\341\23\276"+
    "\1\0\2\276\20\0\11\276\1\342\16\276\1\0\2\276"+
    "\20\0\15\276\1\343\12\276\1\0\2\276\51\0\1\344"+
    "\2\0\1\105\47\0\1\345\2\0\1\266\47\0\1\346"+
    "\52\0\1\347\52\0\1\267\2\0\1\350\14\0\2\200"+
    "\30\351\2\200\1\351\1\272\15\200\42\111\1\352\10\111"+
    "\2\0\30\353\1\0\2\353\20\0\11\353\1\354\16\353"+
    "\1\0\2\353\20\0\13\353\1\355\14\353\1\0\2\353"+
    "\20\0\11\353\1\356\16\353\1\0\2\353\20\0\7\353"+
    "\1\357\20\353\1\0\2\353\20\0\13\353\1\360\14\353"+
    "\1\0\2\353\20\0\11\353\1\361\16\353\1\0\2\353"+
    "\20\0\7\353\1\362\20\353\1\0\2\353\20\0\16\353"+
    "\1\363\11\353\1\0\2\353\20\0\17\353\1\364\10\353"+
    "\1\0\2\353\20\0\12\353\1\365\15\353\1\0\2\353"+
    "\20\0\5\353\1\366\22\353\1\0\2\353\20\0\5\353"+
    "\1\367\22\353\1\0\2\353\20\0\16\353\1\370\11\353"+
    "\1\0\2\353\20\0\4\353\1\371\23\353\1\0\2\353"+
    "\20\0\21\353\1\372\6\353\1\0\2\353\20\0\4\353"+
    "\1\373\23\353\1\0\2\353\20\0\13\353\1\374\14\353"+
    "\1\0\2\353\20\0\4\353\1\375\23\353\1\0\2\353"+
    "\20\0\4\353\1\376\23\353\1\0\2\353\20\0\2\353"+
    "\1\377\25\353\1\0\2\353\20\0\16\353\1\u0100\11\353"+
    "\1\0\2\353\20\0\7\353\1\u0101\20\353\1\0\2\353"+
    "\20\0\11\353\1\u0102\16\353\1\0\2\353\20\0\7\353"+
    "\1\u0103\20\353\1\0\2\353\20\0\2\353\1\u0104\25\353"+
    "\1\0\2\353\20\0\14\353\1\u0105\13\353\1\0\2\353"+
    "\20\0\5\353\1\u0106\22\353\1\0\2\353\51\0\1\u0107"+
    "\2\0\1\105\47\0\1\u0108\2\0\1\266\47\0\1\u0109"+
    "\52\0\1\267\2\0\1\u010a\14\0\2\200\30\u010b\2\200"+
    "\1\u010b\1\272\15\200\42\111\1\352\1\u010c\7\111\2\0"+
    "\30\u010d\1\0\2\u010d\20\0\1\u010d\1\u010e\26\u010d\1\0"+
    "\2\u010d\20\0\4\u010d\1\u010f\23\u010d\1\0\2\u010d\20\0"+
    "\14\u010d\1\u0110\13\u010d\1\0\2\u010d\20\0\15\u010d\1\u0111"+
    "\12\u010d\1\0\2\u010d\20\0\11\u010d\1\u0112\16\u010d\1\0"+
    "\2\u010d\20\0\23\u010d\1\u0113\4\u010d\1\0\2\u010d\20\0"+
    "\17\u010d\1\u0114\10\u010d\1\0\2\u010d\20\0\5\u010d\1\u0115"+
    "\22\u010d\1\0\2\u010d\20\0\4\u010d\1\u0116\23\u010d\1\0"+
    "\2\u010d\20\0\11\u010d\1\u0117\16\u010d\1\0\2\u010d\20\0"+
    "\11\u010d\1\u0118\16\u010d\1\0\2\u010d\20\0\4\u010d\1\u0119"+
    "\23\u010d\1\0\2\u010d\20\0\4\u010d\1\u011a\23\u010d\1\0"+
    "\2\u010d\20\0\2\u010d\1\u011b\25\u010d\1\0\2\u010d\20\0"+
    "\2\u010d\1\u011c\25\u010d\1\0\2\u010d\51\0\1\u011d\2\0"+
    "\1\105\47\0\1\u011e\2\0\1\266\47\0\1\u011f\52\0"+
    "\1\267\2\0\1\u0120\14\0\2\200\30\u0121\2\200\1\u0121"+
    "\1\272\15\200\2\0\30\u0122\1\0\2\u0122\20\0\3\u0122"+
    "\1\u0123\24\u0122\1\0\2\u0122\20\0\3\u0122\1\u0124\24\u0122"+
    "\1\0\2\u0122\20\0\11\u0122\1\u0125\16\u0122\1\0\2\u0122"+
    "\20\0\4\u0122\1\u0126\23\u0122\1\0\2\u0122\20\0\4\u0122"+
    "\1\u0127\23\u0122\1\0\2\u0122\20\0\4\u0122\1\u0128\23\u0122"+
    "\1\0\2\u0122\20\0\7\u0122\1\u0129\20\u0122\1\0\2\u0122"+
    "\20\0\16\u0122\1\u012a\11\u0122\1\0\2\u0122\20\0\4\u0122"+
    "\1\u012b\23\u0122\1\0\2\u0122\20\0\4\u0122\1\u012c\23\u0122"+
    "\1\0\2\u0122\51\0\1\u012d\2\0\1\105\47\0\1\u012e"+
    "\2\0\1\266\47\0\1\u012f\52\0\1\267\2\0\1\u0130"+
    "\14\0\2\200\30\u0131\2\200\1\u0131\1\272\15\200\2\0"+
    "\30\u0132\1\0\2\u0132\20\0\4\u0132\1\u0133\23\u0132\1\0"+
    "\2\u0132\20\0\16\u0132\1\u0134\11\u0132\1\0\2\u0132\51\0"+
    "\1\u0135\2\0\1\105\47\0\1\u0136\2\0\1\266\47\0"+
    "\1\u0137\52\0\1\267\2\0\1\u0138\14\0\2\200\30\u0139"+
    "\2\200\1\u0139\1\272\15\200\2\0\30\u013a\1\0\2\u013a"+
    "\51\0\1\u013b\2\0\1\105\47\0\1\u013c\2\0\1\266"+
    "\47\0\1\u013d\52\0\1\267\2\0\1\u013e\14\0\2\200"+
    "\30\u013f\2\200\1\u013f\1\272\15\200\2\0\30\u0140\1\0"+
    "\2\u0140\54\0\1\105\47\0\1\u0141\2\0\1\266\47\0"+
    "\1\u0142\52\0\1\267\2\0\1\u0143\14\0\2\200\30\u0144"+
    "\2\200\1\u0144\1\272\15\200\2\0\30\u0145\1\0\2\u0145"+
    "\51\0\1\u0146\2\0\1\266\47\0\1\u0147\52\0\1\267"+
    "\2\0\1\u0148\14\0\35\200\1\272\15\200\2\0\30\u0149"+
    "\1\0\2\u0149\54\0\1\266\47\0\1\u014a\52\0\1\267"+
    "\2\0\1\u014b\16\0\30\u014c\1\0\2\u014c\51\0\1\u014d"+
    "\52\0\1\267\2\0\1\u014e\16\0\30\u014f\1\0\2\u014f"+
    "\51\0\1\267\2\0\1\u0150\16\0\30\u0151\1\0\2\u0151"+
    "\51\0\1\267\2\0\1\u0152\16\0\30\u0153\1\0\2\u0153"+
    "\51\0\1\267\2\0\1\u0154\16\0\30\u0155\1\0\2\u0155"+
    "\51\0\1\267\2\0\1\u0156\16\0\30\u0157\1\0\2\u0157"+
    "\51\0\1\267\2\0\1\u0158\16\0\30\u0159\1\0\2\u0159"+
    "\51\0\1\267\2\0\1\u015a\16\0\30\u015b\1\0\2\u015b"+
    "\51\0\1\267\2\0\1\u015c\16\0\30\u015d\1\0\2\u015d"+
    "\51\0\1\267\21\0\30\u015e\1\0\2\u015e\20\0\30\u015f"+
    "\1\0\2\u015f\20\0\30\u0160\1\0\2\u0160\20\0\30\u0161"+
    "\1\0\2\u0161\20\0\30\u0162\1\0\2\u0162\20\0\30\u0163"+
    "\1\0\2\u0163\20\0\30\u0164\1\0\2\u0164\20\0\30\u0165"+
    "\1\0\2\u0165\20\0\30\u0166\1\0\2\u0166\20\0\30\u0167"+
    "\1\0\2\u0167\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12599];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\1\1\3\11\46\1\3\0"+
    "\1\11\1\0\1\1\2\0\1\11\1\0\60\1\1\0"+
    "\1\11\1\1\2\11\1\0\2\1\1\0\60\1\1\0"+
    "\1\1\1\11\1\0\1\11\50\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\35\1\1\0\1\1\1\0\23\1"+
    "\1\0\1\1\1\0\15\1\1\0\1\1\1\0\4\1"+
    "\2\0\1\1\1\0\2\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\12\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scannercpp(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("No es parte del lenguaje");
            }
          case 73: break;
          case 2: 
            { /* ignorar espacion en blanco*/
            }
          case 74: break;
          case 3: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> un identificador valido");
    return tokenscpp.IDENTIFICADOR;
            }
          case 75: break;
          case 4: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es un numero entero");
    return tokenscpp.NUM_ENTERO;
            }
          case 76: break;
          case 5: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> se identifica un operador relacional");
    return tokenscpp.OPERADOR_RELACIONAL;
            }
          case 77: break;
          case 6: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> se identifica un operador aritmetico");
    return tokenscpp.OPERADOR_ARITMETICO;
            }
          case 78: break;
          case 7: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es caracter especial");
    return tokenscpp.ESPECIAL;
            }
          case 79: break;
          case 8: 
            { System.out.print(yytext());
            }
          case 80: break;
          case 9: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Código condicionado de un test ");                
                return tokenscpp.IF;
            }
          case 81: break;
          case 10: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Inicio de un bucle ");                
                return tokenscpp.DO;
            }
          case 82: break;
          case 11: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> se identifica un operador logico");
    return tokenscpp.OPERADOR_LOGICO;
            }
          case 83: break;
          case 12: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es comentario de linea");
    return tokenscpp.COMENTARIO_LINEA;
            }
          case 84: break;
          case 13: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es una cadena");
    return tokenscpp.CADENA;
            }
          case 85: break;
          case 14: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Ejecuta codigo que puede lanzar una excepcion ");                
                return tokenscpp.TRY;
            }
          case 86: break;
          case 15: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea un objeto ");                
                return tokenscpp.NEW;
            }
          case 87: break;
          case 16: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato int ");                
                return tokenscpp.INT;
            }
          case 88: break;
          case 17: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> Es flotante");
    return tokenscpp.FLOTANTE;
            }
          case 89: break;
          case 18: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR el caracter no fue cerrado");
    return tokenscpp.CARACTER_ERROR1;
            }
          case 90: break;
          case 19: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es un caracter");
    return tokenscpp.CARACTER;
            }
          case 91: break;
          case 20: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR no puede iniciar un caracter con doble comilla");
    return tokenscpp.CARACTER_ERROR2;
            }
          case 92: break;
          case 21: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR falta cerrar la cadena");
    return tokenscpp.CADENA_ERROR;
            }
          case 93: break;
          case 22: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato boolean ");                
                return tokenscpp.BOOL;
            }
          case 94: break;
          case 23: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato long ");                
                return tokenscpp.LONG;
            }
          case 95: break;
          case 24: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Ruta alternativa para un if ");                
                return tokenscpp.ELSE;
            }
          case 96: break;
          case 25: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Define expresión de switch ");                
                return tokenscpp.CASE;
            }
          case 97: break;
          case 26: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato char ");                
                return tokenscpp.CHAR;
            }
          case 98: break;
          case 27: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Valor booleano verdadero ");                
                return tokenscpp.TRUE;
            }
          case 99: break;
          case 28: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Puntero privado al objeto actual de una clase ");                
                return tokenscpp.THIS;
            }
          case 100: break;
          case 29: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato void ");                
                return tokenscpp.VOID;
            }
          case 101: break;
          case 30: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR no puede poner un segundo punto despues de sus decimales");
    return tokenscpp.FLOTANTE_ERROR2;
            }
          case 102: break;
          case 31: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR debe de usar un solo punto para flotante");
    return tokenscpp.FLOTANTE_ERROR;
            }
          case 103: break;
          case 32: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR solo se puede agregar caracteres de 1 letra");
    return tokenscpp.CARACTER_ERROR;
            }
          case 104: break;
          case 33: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> es comentario de bloque");
    return tokenscpp.COMENTARIO_BLOQUE;
            }
          case 105: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR falta cerrar la cadena");
    return tokenscpp.CADENA_ERROR;
            }
          case 106: break;
          case 35: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Salir de un bucle ");                
                return tokenscpp.BREAK;
            }
          case 107: break;
          case 36: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara una variable, función o referencia ");                
                return tokenscpp.CONST;
            }
          case 108: break;
          case 37: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara una clase ");                
                return tokenscpp.CLASS;
            }
          case 109: break;
          case 38: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Captura expresión lanzada por un throw ");                
                return tokenscpp.CATCH;
            }
          case 110: break;
          case 39: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable de tipo entero corto ");                
                return tokenscpp.SHORT;
            }
          case 111: break;
          case 40: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Arroja una excepción ");                
                return tokenscpp.THROW;
            }
          case 112: break;
          case 41: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Importa un nombre o símbolo de un namespace en el ámbito actual ");                
                return tokenscpp.USING;
            }
          case 113: break;
          case 42: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Funde múltiples valores en una misma ubicación en la memoria ");                
                return tokenscpp.UNION;
            }
          case 114: break;
          case 43: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Valor booleano falso ");                
                return tokenscpp.FALSE;
            }
          case 115: break;
          case 44: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Inicia o termina un bucle ");                
                return tokenscpp.WHILE;
            }
          case 116: break;
          case 45: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
    System.out.println(yytext()+" -> ERROR no puede poner numeros con puntos de forma consecutiva");
    return tokenscpp.FLOTANTE_ERROR1;
            }
          case 117: break;
          case 46: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Retorna desde una funcion ");                
                return tokenscpp.RETURN;
            }
          case 118: break;
          case 47: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Define una estructura ");                
                return tokenscpp.STRUCT;
            }
          case 119: break;
          case 48: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea almacenamiento para una variable ");                
                return tokenscpp.STATIC;
            }
          case 120: break;
          case 49: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable entera como tipo signo ");                
                return tokenscpp.SIGNED;
            }
          case 121: break;
          case 50: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Obtiene la capacidad de memoria ");                
                return tokenscpp.SIZEOF;
            }
          case 122: break;
          case 51: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Define una estructura ");                
                return tokenscpp.SWITCH;
            }
          case 123: break;
          case 52: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Retorna información sobre un objeto ");                
                return tokenscpp.TYPEID;
            }
          case 124: break;
          case 53: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Función expandida in-situ ");                
                return tokenscpp.INLINE;
            }
          case 125: break;
          case 54: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato double ");                
                return tokenscpp.DOUBLE;
            }
          case 126: break;
          case 55: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Borra memoria que ha sido reservada ");                
                return tokenscpp.DELETE;
            }
          case 127: break;
          case 56: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Función no-miembro como amiga de una clase ");                
                return tokenscpp.FRIEND;
            }
          case 128: break;
          case 57: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara componentes publicos de una clase ");                
                return tokenscpp.PUBLIC;
            }
          case 129: break;
          case 58: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea un alias para un tipo de datos ");                
                return tokenscpp.TYPEDEF;
            }
          case 130: break;
          case 59: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Gestiona el caso por defecto en un switch ");                
                return tokenscpp.DEFAULT;
            }
          case 131: break;
          case 60: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara componentes privados de una clase ");                
                return tokenscpp.PRIVATE;
            }
          case 132: break;
          case 61: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Quita propiedad const de un objeto ");                
                return tokenscpp.MUTABLE;
            }
          case 133: break;
          case 62: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea una función método que puede ser reemplazada por clases derivadas ");                
                return tokenscpp.VIRTUAL;
            }
          case 134: break;
          case 63: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea funciones operador sobrecargadas ");                
                return tokenscpp.OPERATOR;
            }
          case 135: break;
          case 64: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Almacena una variable en un registro maquina ");                
                return tokenscpp.REGISTER;
            }
          case 136: break;
          case 65: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Constructor de una clase para conversiones ");                
                return tokenscpp.EXPLICIT;
            }
          case 137: break;
          case 66: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Salta la iteración en un bucle ");                
                return tokenscpp.CONTINUE;
            }
          case 138: break;
          case 67: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Crea una plantilla para código de funciones u objetos ");                
                return tokenscpp.TEMPLATE;
            }
          case 139: break;
          case 68: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara que el próximo identificador es un tipo de datos ");                
                return tokenscpp.TYPENAME;
            }
          case 140: break;
          case 69: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara variable entera como sin signo ");                
                return tokenscpp.UNSIGNED;
            }
          case 141: break;
          case 70: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Factor externo al programa ");                
                return tokenscpp.VOLATILE;
            }
          case 142: break;
          case 71: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Particiona espacio de nombres al definir ");                
                return tokenscpp.NAMESPACE;
            }
          case 143: break;
          case 72: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Declara componentes protegidos de una clase ");                
                return tokenscpp.PROTECTED;
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scannercpp [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scannercpp scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scannercpp(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
